//
// Created by jacky on 2022/11/7.
//
#include <iostream>

using namespace std;

int main() {
    //2.18
    int *p = nullptr; // 初始化指针位空指针
    int i = 100;
    p = &i; // 更改指针的值，从空变为指向变量i，存放的是i的内存地址，&在此处等号右边是作为取地址符
    cout << p << ":" << *p << endl; // 指针作为取指向的变量值时，用*
    *p = 1; // 改变指针指向对象的值为1
    cout << *p << " " << i << endl;
    /**
     * 2.19 指针与引用的区别
     * 引用本身不是一个对象，相当于是所引用对象的一个别名，并且一旦绑定后，就不可以再更改
     * 引用的定义放int i = 0; int &ref = i;i与ref是同一个对象，对一个的操作，另一个也能体现
     * 指针本身便是一个对象，可以进行初始化，指针存放的是指向对象的内存地址，可以更改值也就是更改指向对象
     * 指针的定义 int i = 100; int *p = &i; 通过指针获取指向对象值用 *p
     */

    cout << "\n----------------------------\n" << endl;

    // 2.20
    int j = 42;
    int *pInt = &j;
    *pInt = *pInt * *pInt; // 相当于将j变为了j^2
    cout << j << "  " << *pInt << endl;

    // 2.21--指针定义的一些非法操作，指针类型与变量类型不对应，指针初始化赋值不是变量地址，也不能是值为0的变量
    int k = 0;
    // double *dp = &k; 类型不对应
    // int *ip = i; //不能是变量
    int *ip = 0; // 初始化为空指针
    int *ip2 = &i; // 正确定义

    // 2.22--指针值作为条件判断，当指针所值的对象非0则为true，为0则为false， 同样将指针取值*p后一样
    if (pInt) {
        cout << true << endl;
    }
    if (*pInt) {
        cout << true << endl;
    }

    // 2.23--仅给出一个指针，无法指向它指向的是否为一个合法对象

    // 2.24--空类型指针，初始化时可以指向任意类型的变量
    int x = 42;
    void *pVoid = &x; // 合法
//    cout << *pVoid << endl;  空类型指针无法取值，需转为对应类型指针再取值
    cout << *(int *) pVoid << endl;
//    long *pInt1 = &i; // 不合法，类型不对应
}