//
// Created by jacky on 2022/11/15.
//
#include <iostream>
#include <vector>

using namespace std;

int main() {
    // 递增递减运算符为对象加1减1提供了一种简洁的书写形式
    // 这两个还未迭代器提供了运算
    // 分为了前置和后置两个版本
    // 前置版本中，将对象加1或减1后，将改变后的对象作为求职结果
    // 后置版本中，将对象加1或减1后，求值结果不变仍是运算对象改变之前的副本
    int i = 0, j;
    j = ++i; // 前置版本j得到的是i递增后的值
    cout << j << " " << i << endl;
    j = i++; // 后置版本j得到的是i递增之前的值
    cout << j << " " << i << endl;

    /**
     * 除非必要，否则不用递增递减运算符的后置版本！
     */

    cout << "----------------------------" << endl;

    // 混用解引用和递增运算符
    // 当我们需要一边输出对象的原本值，一般将对象加1减一等操作，我们可以使用后置版本
    vector<int> v {0, 1, 2, 3, 4};
    auto pbeg = v.begin();
    // 使用while输出vector中所有元素
    while (pbeg != v.end()) {
        cout << *pbeg++ << endl; // 输出当前值的同时将pbeg向前移动一个元素
    }
    // 本程序的重要在于理解*pbeg++的操作
    // 根据优先律，递增操作优先级高于解引用操作，因此会先将pbeg++执行，此递增操作的返回值为解引用操作的作用对象
    // 因为后置版本递增后返回的原对象的一个副本，因此此时解引用得到还是当前值！
    // 因此本操作等价于 cout << *pbeg << endl; ++pbeg;

    // 运算对象可按任意顺序求值，因此要谨慎对待左右值对象都包括对同一个对象的操作
    // *beg = toupper(*beg++) ，就是一个错误的语句，beg在两端都被使用，并且还改变其值，这就会导致左边的赋值语句未定义
}