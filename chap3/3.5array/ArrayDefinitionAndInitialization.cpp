//
// Created by jacky on 2022/11/10.
//
#include <iostream>
#include <string>

using namespace std;

int main() {
    // 数组的声明 a[d]，a是数组的名字，d是数组的维度，维度说明数组中元素的个数，必须大于0
    // 维度定义时必须是一个常量表达式，constexpr！
    unsigned cnt = 42; // 不是常量表达式
    constexpr unsigned sz = 42; // 常量表达式
    int arr[10]; // 字面值是常量表达式，含有10个整数的数组
    int *parr[sz]; // sz是定义的常量表达式，含有42个整型指针的数组
//    string bad[cnt]; // 不合法， cnt不是常量的表达式

    // 显示初始化数组元素
    // 可以对数组元素进行列表初始化
    const unsigned len = 3;
    int a1[len] = {1, 2, 3}; // 列表初始化指定数组维度，且维度等于列表内元素个数
    int a2[] = {1, 2, 3}; // 使用列表初始化时，可省略维度，编译器会根据列表内元素个数自行推断
    int a3[5] = {1, 2, 3}; // 列表初始化指定数组维度维度大于列表内元素个数时，前面元素按列表元素初始化，后面执行默认初始化
    // 相当于列表初始化传入{1, 2, 3, 0, 0}
    string a4[3] = {"hi", "hello"}; // 同上，相当于传入{"hi", "hello", ""}
//    int a5[2] = {0, 1, 2} // 不合法;列表初始化指定数组维度维度小于列表内元素个数

    // 字符数组的特殊性
    // 可以使用字符串字面值对字符数组进行初始化！
    // 但需要注意的是，字符串字面值结尾隐含了一个空字符，会被一同拷贝到字符数组中进行初始化
    char c1[] = {'c', '+', '+'}; // 列表初始化，没有空字符
    char c2[] = {'c', '+', '+', '\0'}; // 列表初始化，显示包含空字符
    char c3[] = "c++";  // 隐含包含空字符，最终初始化效果等同于c2
//    char c4[3] = "c++"; // 不合法，没有空间存放空字符

    // 数组不允许拷贝与赋值
    // 不可以将数组的内容拷贝给其他数组作为其初始值，也不能用数组为其他数组赋值
    int a11[] = {0, 1, 2};
//    int a22[] = a11; // 不合法，不可以使用一个数组初始化另一个数组
//    a22 = a11; // 不合法，也不可以直接把一个数组赋值给另一个数组

    // 复杂的数组声明
    // 数组与指针，引用复杂形式声明
    int *ptrs[10]; // ptrs包含10个整形指针的数组
    // 引用本身不是对象，因此没有包含引用的数组
    int (*Parray) [10] = &arr; // Parray指向一个含有10个整数的数组
    int (&arrRef) [10] = arr; // arrRef引用一个含有10个整数的数组
    int *(&array) [10] = ptrs; // array引用了一个含有10个整型指针的数组

    /**
     * 对于这种复杂形式，可以从内向外看，先根据括号内，确定对象是一个指针或引用
     * 再根据括号外两边，分别确定数组的维度与数组内元素的类型
     */
}
