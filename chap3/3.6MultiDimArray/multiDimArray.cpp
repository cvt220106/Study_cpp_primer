//
// Created by jacky on 2022/11/12.
//
#include <iostream>

using namespace std;

int main() {
    // 多维数组本质上是数组的数组
    // 多维数组的初始化
    int ia[3][4] = { // 三个元素，每个元素都是大小为4的数组
            {0, 1, 2, 3}, // 第一行的初始值
            {4, 5, 6, 7}, // 第二行的初始值
            {8, 9, 10, 11}// 第三行初始值
    };
    // 实际上内存嵌套的{}并非是必须的，只是让人们对于代码更加易读
    // 等同于一个{}的初始化
    int ia1[3][4] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

    // 同样和一维数组类似，初始化数组时并非需要所有元素的值都应包含在初始化列表中
    // 显示初始化每行的第一个元素，其他元素执行默认初始化
    int ia2[3][4] = {{0}, {4}, {8}};
    // 这个时候内层的{}就显得十分重要了
    // 若没有内层的{}，就相当于只初始化的第一行的三个元素，其他元素执行默认初始化
    int ia3[3][4] = {0 , 4, 8};

    // 多维数组的下标引用
    // 表达式的下标运算符数量等于数组的维度，表达式的结果就是给定类型的元素
    // 如果下标运算符数量小于数组的维度，表达式的结果式给定索引处的一个内层数组
    ia[2][3] = 100; //令ia最后一行的最后一个元素赋值为100
    int (&row)[4] = ia[2]; // 将row绑定到ia的第3个4元素数组上
    for (int i = 0; i < 4; ++i) {
        cout << row[i] << " ";
    }
    cout << endl;

    cout << "------------------------------" << endl;

    // 两层循环嵌套for循环处理多维数组的元素
    constexpr size_t rowCnt = 3, colCnt = 4;
    int iarr[rowCnt][colCnt];
    // 对于每一行的for
    for (size_t i = 0; i != rowCnt; ++i) {
        // 对于每一列的for
        for (size_t j = 0; j != colCnt; ++j) {
            // 将元素的位置索引作为它的值
            iarr[i][j] = i * colCnt + j;
        }
    }

    // 使用范围for循环处理多维数组
    for (auto &row : iarr) {
        for (auto col: row) {
            cout << col << " ";
        }
        cout << endl;
    }
    /**
     * 在使用范围for循环处理多维数组时，除了最内层的for循环外，其他层次的for无论读还是写，都应该是引用形式
     */

    // 错误实例
//    for (auto row : iarr) {
//        for (auto col : row) {
//            // 此时内层for就是出现问题，因为row被识别为了一个数组首元素的指针
//            // 对于一个int*的row在内层显然是无法进行for循环的，因此外层的row必须是auto &
//        }
//    }

    cout << "------------------------------" << endl;

    // 指针与多维数组
    // 多维数组实质上是数组的数组，由多维数组名转换而来的指针实际上是指向第一个内层数组的指针
    int (*p)[4] = ia; // p指向含有4个整数的数组
    p = &ia[2]; // p指向ia的尾元素，也就是最后一个包含4个元素的数组

    // 通过auto或decltype来来推测这些指针类型
    // 通过指针来输出ia的所有元素
    for (auto p = ia; p != ia + 3 ; ++p) {
        for (auto q = *p; q != *p + 4; ++q) {
            cout << *q << " ";
        }
        cout << endl;
    }
    // 在这个程序中，指针p指向的二维数组ia的外层数组，是一个指向包含4个元素的数组，相当于二维数组中一行
    // 每次＋1都是指向下一行
    // 指针q指向的则是内层数组的首元素，相当于每一行的首元素，每次+1都是指向这一行的下一元素

    cout << "------------------------------" << endl;

    // 通过begin和end也可以得到相同结果
    for (auto p = begin(ia); p != end(ia) ; ++p) {
        for (auto q = begin(*p); q != end(*p); ++q) {
            cout << *q << " ";
        }
        cout << endl;
    }

    cout << "------------------------------" << endl;

    // 类型别名简化多维数组的指针
    // typedef或using来进行别名,将4个整数组成的数组命名维int_array
    using int_array = int[4]; // 等价于typedef int int_array[4];
    for (int_array *p = ia; p != ia + 3 ; ++p) {
        for (int *q = *p; q != *p + 4; ++q) {
            cout << *q << " ";
        }
        cout << endl;
    }
}